---
layout: post
title:  "求二进制数中1的个数"
categories: Leetcode
---

* content
{:toc}


## 给出一个32位无符号整数，返回其二进制表示中1的个数

Leetcode编号191[戳我](https://leetcode.com/problems/Number-of-1-Bits/?tab=Description)

最容易想到的**移位判断法**代码如下：

```cpp
int Binary1(unsigned int n)
{
    int c =0 ; 
    for (c =0; n; n >>=1)
        c += n &1 ;
    return c ;
}
```
时间消耗与n位数呈正相关。

更快的方法是时间消耗与n中1的个数呈正相关的**快速法**，代码如下：
```cpp
int Binary1(unsigned int n)
{
    int c =0 ;
    for (c =0; n!=0; ++c)
        n &= (n -1) ;
    return c ;
}
```

如果不怕代码又臭又长，可以使用**查表法**，代码如下：
```cpp
int Binary1(unsigned int n)
{ 
    int table[256] = 
    { 
        0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
        3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
        3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
        4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 
    }; 

    return table[n &0xff] +table[(n >>8) &0xff] +table[(n >>16) &0xff] +table[(n >>24) &0xff] ;
}
```
table[i]表示i对应的八位二进制数中所含1的个数，题中给的数是32位，所以用移位与运算提取四次，把每次得到的1的个数相加即为所求结果。

如果不怕麻烦也可以建一个32X32的大数组，更快。


下面两种算法体现了接近于掩码的思想：

**平行算法**

使用自定义的mask将n的相邻位相加，迭代得到结果

```cpp
int Binary1(unsigned int n) 
{ 
    n = (n &0x55555555) + ((n >>1) &0x55555555) ; 
    n = (n &0x33333333) + ((n >>2) &0x33333333) ; 
    n = (n &0x0f0f0f0f) + ((n >>4) &0x0f0f0f0f) ; 
    n = (n &0x00ff00ff) + ((n >>8) &0x00ff00ff) ; 
    n = (n &0x0000ffff) + ((n >>16) &0x0000ffff) ; 
    return n ; 
}
```
它的改良版代码如下：
```cpp
int Binary1(unsigned int n)
{
	n = n - ((n >> 1) & 0x55555555);
	n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
	n = (n + (n >> 4)) & 0x0f0f0f0f;
	n = n + (n >> 8);
	n = n + (n >> 16);
	return n & 0x3f;
}
```

**MIT HAKMEM算法**

我真的给设计这个算法的人跪下了，怎么想到的？

* [MIT HAKMEM算法分析](http://blog.csdn.net/msquare/article/details/4536388)

最后给出一个微软提供的现成指令：
* [_mm_popcnt_u32()](https://msdn.microsoft.com/zh-tw/LIbrary/bb514083)
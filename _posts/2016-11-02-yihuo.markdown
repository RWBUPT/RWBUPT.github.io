---
layout: post
title:  "异或的小把戏"
date:   2016-11-02 16:58:30
categories: Interview
---
一道求斐波那契数列第n项的小题，解法大概是这样：

```cpp
#include <iostream>
using namespace std;  
 int main()
 {  
int n,a=1,b=1;  
cout<<"Please input n:"<<endl;
cin>>n;
for(int i=0;i<n-1;i++)
{
    a =a + b; 
   // 交换a和b
    a =a ^ b;  
    b =b ^ a;
    a =a ^ b;
}
cout<<b<<endl;  
return 0;
 }
```
中间那三行代码其实就是实现***swap(a,b)***的功能，当时我还有点困惑于为什么要把位运算拉出来

后来在一本书上看到了类似的题目：不创造额外的变量，直接交换两个变量的值，其中一种就是这个方法。

另一种方法如下：

```cpp
a = a - b;
b = a + b;
a = b - a;
```

补充：

> 如何在不使用算术运算符的情况下实现两个数的相加？

把加法的结果拆成两个部分：对应数位的值之和的末位，和各数位对应的进位值。这两者的和就是最终结果。

前者可以用异或来实现，后者用与来实现。递归多次直到进位值归零（全被合并入结果）。

注意这里必须从二进制的角度处理数据，否则无法避免使用算术运算符。

代码如下：

```cpp
int add(int a, int b)
{
if(b == 0) return a;
int sum = a ^ b;
int carry = (a & b)<< 1;
return add(sum, carry);
}
```